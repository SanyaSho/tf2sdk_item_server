//======= Copyright 1996-2010, Valve Corporation, All rights reserved. ========
//
// Purpose: Minimized version of base_gcmessages.proto, tf_gcmessages.proto
// and gcsdk_gcmessages.proto
//
//=============================================================================

// We care more about speed than code size
option optimize_for = SPEED;

// We don't use the service generation functionality
option cc_generic_services = false;


import "google/protobuf/descriptor.proto";

extend google.protobuf.FieldOptions {
	optional bool key_field = 60000 [ default = false ];
}


// Item attributes
message CAttribute_String
{
	optional string value = 1;
}


// MAIN MESSAGE
message CMsgSOIDOwner
{
	optional uint32 type = 1;
	optional uint64 id = 2;
}

message CMsgSOCacheSubscribed
{
	message SubscribedType
	{
		optional int32			type_id = 1;		// ID of the type for these objects
		repeated bytes			object_data = 2;	// the data for all the objects of this type
	};
	
	optional	fixed64			owner = 1;		// the owner of this cache
	repeated	SubscribedType		objects = 2;		// a list of types
	optional	fixed64			version = 3;		// version of the cache
	optional	CMsgSOIDOwner		owner_soid = 4;		// The SOID that owns this object
	optional	uint32			service_id = 5;		// The service that is providing this SO cache information
	repeated	uint32			service_list = 6;	// Other services that are providing parts of this cache and need to to be received for it to be complete
	optional	fixed64			sync_version = 7;	// The unique ID of the sync to ensure all subscribes across services match. Ignored/not provided if no other GCs are involved
};


// MSG: k_EEconTypeItemPresetInstance (36)
message CSOClassPresetClientData
{
	optional uint32					account_id = 1;
	optional uint32					class_id = 2;
	optional uint32					active_preset_id = 3;
};


// MSG: k_EEconTypeItem (1)
message CSOEconItemAttribute
{
	optional uint32		def_index = 1;
	optional uint32		value = 2;						// DEPRECATED -- see value_bytes
	optional bytes		value_bytes = 3;
}

message CSOEconItemEquipped
{
	optional uint32		new_class = 1;
	optional uint32		new_slot = 2;
}

message CSOEconItem
{
	optional uint64					id = 1;
	optional uint32					account_id = 2;
	optional uint32					inventory = 3;
	optional uint32					def_index = 4;
	optional uint32					quantity = 5;
	optional uint32					level = 6;
	optional uint32					quality = 7;
	optional uint32					flags = 8 [ default = 0 ];
	optional uint32					origin = 9;
	optional string					custom_name = 10;
	optional string					custom_desc = 11;
	repeated CSOEconItemAttribute	attribute = 12;
	optional CSOEconItem			interior_item = 13;
	optional bool					in_use = 14 [ default = false ];
	optional uint32					style = 15 [default = 0 ];
	optional uint64					original_id = 16 [ default = 0 ];
	optional bool					contains_equipped_state = 17;			// DEPRECATED
	repeated CSOEconItemEquipped	equipped_state = 18;
	optional bool					contains_equipped_state_v2 = 19;		// will be set to true even if equipped_state is an empty array, meaning "unequipped from everything"
}


// MSG: k_EEconTypeGameAccountClient (7)
message CSOEconGameAccountClient
{
	optional	uint32		additional_backpack_slots = 1 [ default = 0 ]; // the number of backpack slots this user has on top of DEFAULT_NUM_BACKPACK_SLOTS
	optional	bool		trial_account = 2 [ default = false ];
//	optional	bool		eligible_for_online_play = 3 [ default = true ];		// DEPRECATED
	optional	bool		need_to_choose_most_helpful_friend = 4;
	optional	bool		in_coaches_list = 5;
	optional	fixed32		trade_ban_expiration = 6;
	optional	fixed32		duel_ban_expiration = 7;
	optional	uint32		preview_item_def = 8 [ default = 0 ];
//	optional	bool		eligible_for_community_market = 9;						// DEPRECATED
	optional	bool		phone_verified = 19 [ default = false ];
	optional	uint32		skill_rating_6v6 = 20;
	optional	uint32		skill_rating_9v9 = 21;
//	optional	bool		two_factor_enabled = 22 [ default = false ]; // No longer shared with clients
	optional	bool		competitive_access = 23 [ default = false ];
	// !! 18 out of order slightly to be more properly grouped with the various ban fields
	optional	uint32		matchmaking_ranked_ban_expiration = 18;             // player can't matchmake in ranked groups until this time
	optional	uint32		matchmaking_ranked_low_priority_expiration = 24;    // MM low priority in ranked groups until
	optional	uint32		matchmaking_ranked_ban_last_duration = 25;          // How long the current ranked ban's total duration was set for
	optional	uint32		matchmaking_ranked_low_priority_last_duration = 26; // How long the current ranked ban's total duration was set for
	optional	uint32		matchmaking_casual_ban_expiration = 27;             // player can't matchmake in casual groups until this time
	optional	uint32		matchmaking_casual_low_priority_expiration = 28;    // MM low priority in casual groups until
	optional	uint32		matchmaking_casual_ban_last_duration = 29;          // How long the current casual ban's total duration was set for
	optional	uint32		matchmaking_casual_low_priority_last_duration = 30; // How long the current casual ban's total duration was set for
	optional	bool		phone_identifying = 31 [ default = false ];
	optional	bool		disable_party_quest_progress = 32 [ default = false ];
	optional	uint32		quest_reward_credits = 33;
	optional	uint32		matchmaking_last_casual_excessive_reports_auto_ban_time = 34;	// Last time we were banned for excessive reports in casual
	optional	uint32		matchmaking_last_comp_excessive_reports_auto_ban_time = 35;		// Last time we were banned for excessive reports in comp
}


// MSG: k_EEconTypeDuelSummary (19)
message CSOTFDuelSummary
{
	optional	uint32		account_id = 1 [ (key_field) = true ];
	optional	uint32		duel_wins = 2;
	optional	uint32		duel_losses = 3;
	optional	uint32		last_duel_account_id = 4;
	optional	uint32		last_duel_timestamp = 5;
	optional	uint32		last_duel_status = 6;
}


// MSG: k_EEconTypeMapContribution (28)
message CSOTFMapContribution
{
	optional	uint32		account_id = 1 [ (key_field) = true ];
	optional	uint32		def_index = 2 [ (key_field) = true ];
	optional	uint32		contribution_level = 3;
}


// MSG: k_EEConTypeLadderData (39)
message CSOTFLadderPlayerStats
{
	optional	uint32 account_id = 1 [ (key_field) = true ];
	optional	int32 match_group = 2 [ (key_field) = true ];
	optional	uint32 season_id = 3 [ (key_field) = true ];
	// Deprecated, now stored separately from ladder data
	// optional uint32 rating = 4;
	// optional uint32 last_ackd_rating = 31;
	// optional int32 last_rating_change = 5;
	// Stats - season total
	optional	uint32 games = 9;
	optional	uint32 score = 10;
	optional	uint32 kills = 11;
	optional	uint32 deaths = 12;
	optional	uint32 damage = 13;
	optional	uint32 healing = 14;
	optional	uint32 support = 15;
	// Medals - season total
	optional	uint32 score_bronze = 16;
	optional	uint32 score_silver = 17;
	optional	uint32 score_gold = 18;
	optional	uint32 kills_bronze = 19;
	optional	uint32 kills_silver = 20;
	optional	uint32 kills_gold = 21;
	optional	uint32 damage_bronze = 22;
	optional	uint32 damage_silver = 23;
	optional	uint32 damage_gold = 24;
	optional	uint32 healing_bronze = 25;
	optional	uint32 healing_silver = 26;
	optional	uint32 healing_gold = 27;
	optional	uint32 support_bronze = 28;
	optional	uint32 support_silver = 29;
	optional	uint32 support_gold = 30;
}


// MSG: k_EProtoObjectTFRatingData (2007) (k_EProtoObjectTypesGameBase + 7)
message CSOTFRatingData
{
	optional uint32 account_id  = 1 [ (key_field) = true ];
	optional int32  rating_type = 2 [ (key_field) = true ]; // int16 in the db
	// Corresponds to MMRatingData_t
	optional uint32 rating_primary   = 3;
	optional uint32 rating_secondary = 4;
	optional uint32 rating_tertiary  = 5;
}


// MSG: k_EEconTypeQuestMapNode (44)
message CSOQuestMapNode
{
	optional	uint32	account_id			= 1 [ (key_field) = true ];	// Account of who owns this map
	optional	uint32	defindex			= 3 [ (key_field) = true ];	// Defindex that defines this node's properties
	optional	uint32	node_id				= 4;						// Unique ID of this node
	optional	bool	star_0_earned		= 6 [ default = false ];
	optional	bool	star_1_earned		= 7 [ default = false ];
	optional	bool	star_2_earned		= 8 [ default = false ];
	optional	bool	loot_claimed		= 9 [ default = false ];	// Has the user claimed the loot for this node yet?
	optional	uint32	selected_quest_def	= 10 [ default = 0 ];		// The quest the user has selected for this node.  0 == not selected yet.
	optional	uint32	map_cycle			= 11; // Which cycle of the map this uses.  0 is the current.  Buying additional maps will put the current set at the highest MapCycle the users owns + 1, and the new set at 0
}


// MSG: k_EEConTypeQuest (45)
message CSOQuest
{
	optional uint32	account_id					= 1;
	optional uint64	quest_id					= 2 [ (key_field) = true ];
	optional uint32 defindex					= 3;
	optional bool	active						= 4 [ default = false ];
	optional uint32	points_0					= 5;
	optional uint32 points_1					= 6;
	optional uint32 points_2					= 7;
	optional uint32 quest_map_node_source_id	= 8; // The quest map node that we came from, and that'll we'll credit when turned in
	optional uint32	map_cycle					= 9; // Which cycle of the map this uses.  0 is the current.  Buying additional maps will put the current set at the highest MapCycle the users owns + 1, and the new set at 0
}


// MSG: k_EEconTypeQuestMapRewardPurchase (46)
message CSOQuestMapRewardPurchase
{
	optional uint32	account_id					= 1;
	optional uint32	defindex					= 2 [ (key_field) = true ]; // *Reward* defindex.  Not item defindex
	optional uint32 count						= 3;
	optional uint32 map_cycle					= 4; // Which cycle of the map this uses.  0 is the current.  Buying additional maps will put the current set at the highest MapCycle the users owns + 1, and the new set at 0
	optional uint32 purchase_id					= 5; // Unique ID
}


// MSG: k_EEconTypePlayerInfo (2)
message CSOTFPlayerInfo
{
	optional	uint32		num_new_users_helped = 1;
//	optional	bool		trial_account = 2 [ default = false ];	// DEPRECATED
}


// MSG: k_EEConTypeMatchResultPlayerInfo (40)
message CSOTFMatchResultPlayerStats
{
	optional uint64 match_id              = 1 [ (key_field) = true ];
	optional uint32 account_id            = 2 [ (key_field) = true ];
	optional int32  match_group           = 3 [ (key_field) = true ];
	optional uint32 endtime               = 4;
	optional uint32 season_id             = 5;
	optional uint32 status                = 6;
	// Renamed from party_id to reflect that it is the party that matched in, not at match end
	optional uint32 original_party_id     = 7;
	optional uint32 team                  = 8;
	optional uint32 score                 = 9;
	optional uint32 ping                  = 10;
	optional uint32 flags                 = 11;
	optional uint32 display_rating        = 12;
	optional int32  display_rating_change = 13;
	optional uint32 rank                  = 14;
	optional uint32 classes_played        = 15;
	optional uint32 kills                 = 16;
	optional uint32 deaths                = 17;
	optional uint32 damage                = 18;
	optional uint32 healing               = 19;
	optional uint32 support               = 20;
	optional uint32 score_medal           = 21;
	optional uint32 kills_medal           = 22;
	optional uint32 damage_medal          = 23;
	optional uint32 healing_medal         = 24;
	optional uint32 support_medal         = 25;
	optional uint32 map_index             = 26;
	optional uint32 winning_team		  = 27;
}


// MSG: k_EEconTypeNotification (42)
message CMsgGCNotification
{
	// Message GC sends to clients when they have a pending notification
	enum NotificationType
	{
		NOTIFICATION_REPORTED_PLAYER_BANNED          = 0;
		NOTIFICATION_CUSTOM_STRING                   = 1;
		NOTIFICATION_MM_BAN_DUE_TO_EXCESSIVE_REPORTS = 2;
		NOTIFICATION_REPORTED_PLAYER_WAS_BANNED      = 3;
		// A must-confirm-as-seen pop-up notification with a custom support message.  If the string is a localization
		// token, comes from the *GC* localized strings table, and is sent down based on client's current locale
		NOTIFICATION_SUPPORT_MESSAGE                 = 4;

		// Make sure this is at the end
		NOTIFICATION_NUM_TYPES = 5;
	};

	optional uint64 notification_id = 1 [(key_field) = true ];
	optional uint32 account_id = 2;
	// 0 -> doesn't expire
	optional fixed32 expiration_time = 3;
	optional NotificationType type = 4 [ default = NOTIFICATION_CUSTOM_STRING ];
	optional string notification_string = 5;
}